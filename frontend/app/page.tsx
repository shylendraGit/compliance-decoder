'use client';

import React, { useState } from 'react';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';

type RiskResponse = {
  risk_level: 'Low' | 'Moderate' | 'High';
  summary: string;
  flags: string[];
};

export default function HomePage() {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [result, setResult] = useState<RiskResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setSelectedFile(e.target.files[0]);
      setResult(null);
      setError(null);
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) return;

    const formData = new FormData();
    formData.append('file', selectedFile);

    setLoading(true);
    setError(null);

    try {
      const response = await fetch('https://hedgehog-chief-ram.ngrok-free.app/api/upload_certificate?shop=risklens-demo.myshopify.com', {
        method: 'POST',
        body: formData,
        credentials: 'include', // Important for Shopify app bridge
        headers: {
          'Accept': 'application/json'
        }
      });

      const data = await response.json();

      if (data.error) {
        setError(data.error);
      } else {
        setResult(data);
      }
    } catch (err) {
      setError('Failed to scan the file. Please try again.');
    }

    setLoading(false);
  };

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'Low':
        return 'bg-green-100 text-green-800';
      case 'Moderate':
        return 'bg-yellow-100 text-yellow-800';
      case 'High':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const handleExportPDF = async () => {
  if (!result) return;

  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([600, 700]);
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
  const { width, height } = page.getSize();

  let y = height - 50;
  const marginX = 50;

  const drawTextWrapped = (text: string, font: any, fontSize: number, x: number, y: number, maxWidth: number, lineHeight: number) => {
    const words = text.split(' ');
    let line = '';
    let lines: string[] = [];

    for (let word of words) {
      const testLine = line + word + ' ';
      const testWidth = font.widthOfTextAtSize(testLine, fontSize);
      if (testWidth > maxWidth && line !== '') {
        lines.push(line.trim());
        line = word + ' ';
      } else {
        line = testLine;
      }
    }
    lines.push(line.trim());

    lines.forEach((lineText, i) => {
      page.drawText(lineText, {
        x,
        y: y - i * lineHeight,
        size: fontSize,
        font,
        color: rgb(0, 0, 0),
      });
    });

    return y - lines.length * lineHeight;
  };

  // Draw header
  page.drawText('Compliance Risk Report', {
    x: marginX,
    y,
    size: 20,
    font: boldFont,
    color: rgb(0, 0.2, 0.6),
  });
  y -= 40;

  // Draw risk level badge
  let riskColor = {
    Low: rgb(0.2, 0.7, 0.2),
    Moderate: rgb(1, 0.7, 0.1),
    High: rgb(0.9, 0.2, 0.2),
  }[result.risk_level] || rgb(0.6, 0.6, 0.6);

  const badgeText = `Risk Level: ${result.risk_level}`;
  const badgeWidth = boldFont.widthOfTextAtSize(badgeText, 12) + 12;

  page.drawRectangle({
    x: marginX,
    y: y - 18,
    width: badgeWidth,
    height: 20,
    color: riskColor,
    borderColor: rgb(0, 0, 0),
    borderWidth: 0.5,
  });

  page.drawText(badgeText, {
    x: marginX + 6,
    y: y - 14,
    size: 12,
    font: boldFont,
    color: rgb(1, 1, 1),
  });
  y -= 40;

  // Draw summary
  page.drawText('Summary:', {
    x: marginX,
    y,
    size: 14,
    font: boldFont,
    color: rgb(0.1, 0.1, 0.1),
  });
  y -= 20;

  y = drawTextWrapped(result.summary, font, 12, marginX, y, width - 2 * marginX, 16);
  y -= 20;

  // Draw flags (if any)
  if (result.flags.length > 0) {
    page.drawText('Flags:', {
      x: marginX,
      y,
      size: 14,
      font: boldFont,
      color: rgb(0.6, 0, 0),
    });
    y -= 20;

    result.flags.forEach((flag, i) => {
      y = drawTextWrapped(`‚Ä¢ ${flag}`, font, 12, marginX + 10, y, width - 2 * marginX - 10, 16) - 4;
    });

    y -= 10;
  }

  // Draw footer line
  page.drawLine({
    start: { x: marginX, y: 50 },
    end: { x: width - marginX, y: 50 },
    thickness: 0.5,
    color: rgb(0.8, 0.8, 0.8),
  });

  // Footer text
  page.drawText(`Generated by Compliance Decoder ‚Ä¢ ${new Date().toLocaleDateString()}`, {
    x: marginX,
    y: 35,
    size: 10,
    font,
    color: rgb(0.4, 0.4, 0.4),
  });

  const pdfBytes = await pdfDoc.save();
  const blob = new Blob([pdfBytes], { type: 'application/pdf' });
  const url = URL.createObjectURL(blob);

  const link = document.createElement('a');
  link.href = url;
  link.download = 'compliance_report.pdf';
  link.click();

  URL.revokeObjectURL(url);
};

  return (
    <main className="min-h-screen bg-gray-50 p-6 flex flex-col items-center">
      <div className="max-w-xl w-full bg-white rounded-2xl shadow p-6 space-y-4">
        <h1 className="text-2xl font-bold text-gray-800">üõ°Ô∏è Compliance Risk Scanner</h1>

        <input
          type="file"
          onChange={handleFileChange}
          className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:border file:rounded-full file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
        />

        <button
          onClick={handleUpload}
          className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded w-full disabled:opacity-50"
          disabled={!selectedFile || loading}
        >
          {loading ? 'Scanning...' : 'Scan Certificate'}
        </button>

        {error && (
          <div className="text-red-600 text-sm bg-red-50 border border-red-200 rounded p-2">
            {error}
          </div>
        )}

        {result && (
          <>
            <button
              onClick={handleExportPDF}
              className="mt-2 bg-gray-100 hover:bg-gray-200 text-gray-800 py-2 px-4 rounded text-sm"
            >
              üìÑ Download PDF Report
            </button>

            <div className="border-t pt-4 space-y-2">
              <p className={`inline-block px-3 py-1 rounded-full text-sm font-medium ${getRiskColor(result.risk_level)}`}>
                Risk Level: {result.risk_level}
              </p>
              <p className="text-gray-800 text-sm">
                <strong>Summary:</strong> {result.summary}
              </p>
              {result.flags.length > 0 && (
                <div>
                  <strong className="text-sm">Flags:</strong>
                  <ul className="list-disc list-inside text-sm text-red-600">
                    {result.flags.map((flag, index) => (
                      <li key={index}>{flag}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </>
        )}
      </div>
    </main>
  );
}
